name: Process Attendance

on:
  repository_dispatch:
    types: [attendance-scan]

jobs:
  record-attendance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Record Attendance
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { qrData, timestamp, displayTime, source } = context.payload.client_payload;
          
          // Create an issue for each attendance record
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Attendance: ${qrData} - ${displayTime}`,
            body: `
            ## Attendance Record
            
            - **QR Code Data**: ${qrData}
            - **Timestamp**: ${displayTime}
            - **ISO Timestamp**: ${timestamp}
            - **Source**: ${source}
            - **Recorded**: ${new Date().toISOString()}
            `,
            labels: ['attendance', 'automated']
          });
          
          console.log('Attendance recorded:', issue.data.html_url);
          
          // Also append to a CSV file
          const fs = require('fs');
          const csvLine = `"${displayTime}","${qrData}","${timestamp}","${source}"\n`;
          
          try {
            // Try to get existing attendance.csv
            let content = '';
            try {
              const file = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'attendance.csv'
              });
              content = Buffer.from(file.data.content, 'base64').toString();
            } catch (e) {
              // File doesn't exist, create header
              content = '"Timestamp","QR Code Data","ISO Timestamp","Source"\n';
            }
            
            // Append new record
            const newContent = content + csvLine;
            
            // Update or create file
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'attendance.csv',
              message: `Add attendance record: ${qrData}`,
              content: Buffer.from(newContent).toString('base64'),
              sha: content !== '"Timestamp","QR Code Data","ISO Timestamp","Source"\n' ? 
                   (await github.rest.repos.getContent({
                     owner: context.repo.owner,
                     repo: context.repo.repo,
                     path: 'attendance.csv'
                   })).data.sha : undefined
            });
            
          } catch (error) {
            console.log('CSV update failed:', error.message);
          }
