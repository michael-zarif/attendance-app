name: Process Attendance

on:
  repository_dispatch:
    types: [attendance-scan]

permissions:
  contents: write
  issues: write
  actions: write

jobs:
  record-attendance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Record Attendance
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { qrData, timestamp, displayTime, source } = context.payload.client_payload;
          
          console.log('Processing attendance record:', { qrData, displayTime, source });
          
          // Parse QR data to extract mobile, name, and service
          let mobileNumber = '';
          let fullName = '';
          let service = '';
          
          try {
            // The QR data appears to be in Arabic JSON-like format
            const qrText = qrData || '';
            
            // Extract mobile number
            const mobileMatch = qrText.match(/ÿ±ŸÇŸÖ ÿßŸÑŸÖŸàÿ®ÿßŸäŸÑ["":]+"?([^"""}]+)/);
            if (mobileMatch) {
              mobileNumber = mobileMatch[1].replace(/[""]/g, '').trim();
            }
            
            // Extract full name
            const nameMatch = qrText.match(/ÿßŸÑÿßÿ≥ŸÖ ÿ±ÿ®ÿßÿπŸä["":]+"?([^"""}]+)/);
            if (nameMatch) {
              fullName = nameMatch[1].replace(/[""]/g, '').trim();
            }
            
            // Extract service
            const serviceMatch = qrText.match(/ÿßŸÑÿÆÿØŸÖÿ©["":]+"?([^"""}]+)/);
            if (serviceMatch) {
              service = serviceMatch[1].replace(/[""]/g, '').trim();
            }
          } catch (parseError) {
            console.log('Error parsing QR data:', parseError);
            // Fallback to original data
            mobileNumber = qrData;
          }

          console.log('Parsed data:', { fullName, mobileNumber, service });
          
          try {
            // Try to get existing attendance.csv
            let content = '';
            let fileSha = undefined;
            
            try {
              const file = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'attendance.csv'
              });
              content = Buffer.from(file.data.content, 'base64').toString();
              fileSha = file.data.sha;
            } catch (e) {
              // File doesn't exist, create header
              console.log('attendance.csv not found, creating new file');
              content = '"Timestamp","Mobile Number","Full Name","Service"\n';
            }
            
            // Validate required data before processing
            if (!mobileNumber || !fullName || !service) {
              console.log(`‚ùå Invalid QR data - missing required fields:`);
              console.log(`Mobile: "${mobileNumber}", Name: "${fullName}", Service: "${service}"`);
              
              // Create issue for invalid data attempt
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `‚ùå Invalid QR Data Attempt - ${displayTime}`,
                body: `
                ## ‚ùå Invalid QR Data Detected
                
                - **üì± Mobile**: "${mobileNumber}"
                - **üë§ Name**: "${fullName}"
                - **‚õ™ Service**: "${service}"
                - **üïí Attempt Time**: ${displayTime}
                - **‚ùå Status**: **REJECTED - Missing required data**
                
                **Raw QR Data**: \`${qrData}\`
                `,
                labels: ['attendance', 'invalid', 'rejected']
              });
              
              return; // Exit without updating CSV
            }
            
            // Check for duplicate attendance on the same day
            if (content && mobileNumber) {
              const lines = content.split('\n').filter(line => line.trim());
              const duplicateFound = lines.some(line => {
                // Skip header line
                if (line.includes('Timestamp') && line.includes('Mobile Number')) return false;
                
                // Check if mobile number exists in this line
                if (!line.includes(`"${mobileNumber}"`)) return false;
                
                // Extract date from the line (first field)
                const match = line.match(/^"([^"]+)"/);
                if (match) {
                  const entryDate = match[1];
                  const entryDateObj = new Date(entryDate);
                  const todayObj = new Date();
                  
                  // Check if it's the same day (compare date strings for accuracy)
                  const entryDay = entryDateObj.toDateString();
                  const todayDay = todayObj.toDateString();
                  
                  console.log(`Comparing dates: Entry="${entryDay}" vs Today="${todayDay}"`);
                  return entryDay === todayDay;
                }
                return false;
              });
              
              if (duplicateFound) {
                console.log(`‚ö†Ô∏è Duplicate attendance detected for ${fullName} (${mobileNumber}) today`);
                console.log(`‚ùå Attendance not recorded - already present for today`);
                
                // Create a GitHub issue to log the duplicate attempt
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `‚ö†Ô∏è Duplicate Attendance Attempt: ${fullName} - ${displayTime}`,
                  body: `
                  ## ‚ö†Ô∏è Duplicate Attendance Detected
                  
                  - **üë§ Name**: ${fullName}
                  - **üì± Mobile**: ${mobileNumber}
                  - **‚õ™ Service**: ${service}
                  - **üïí Attempt Time**: ${displayTime}
                  - **‚ùå Status**: **REJECTED - Already recorded today**
                  
                  This person has already been recorded for attendance today.
                  `,
                  labels: ['attendance', 'duplicate', 'rejected']
                });
                
                return; // Exit without updating CSV
              }
            }
            
            console.log('‚úÖ No duplicate found, proceeding with attendance recording');
            
            // Create CSV line with proper UTF-8 encoding
            const csvLine = `"${displayTime}","${mobileNumber}","${fullName}","${service}"\n`;
            
            // Append new record
            const newContent = content + csvLine;
            
            // Update or create file with proper UTF-8 encoding
            const updateResult = await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'attendance.csv',
              message: `üìã Attendance: ${fullName || mobileNumber || 'Unknown'} - ${displayTime}`,
              content: Buffer.from(newContent, 'utf8').toString('base64'),
              sha: fileSha
            });
            
            console.log(`‚úÖ Attendance recorded successfully for ${fullName}`);
            console.log(`üìÑ CSV file updated successfully`);
            
          } catch (csvError) {
            console.error('Error updating CSV:', csvError);
            throw csvError;
          }
